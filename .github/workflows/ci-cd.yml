name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'
  COMPOSER_CACHE_DIR: ~/.composer/cache

jobs:
  # ========================================
  # CODE QUALITY & TESTING
  # ========================================
  test:
    name: 🧪 Tests & Quality Checks
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, redis, xdebug
        coverage: xdebug
        tools: composer:v2

    - name: 📦 Cache Composer Dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.COMPOSER_CACHE_DIR }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: 🔧 Install Dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: 📋 Copy Environment File
      run: cp .env.testing .env

    - name: 🔑 Generate Application Key
      run: php console key:generate

    - name: 🗄️ Run Database Migrations
      run: php console migrate:fresh --seed
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: testing
        DB_USERNAME: root
        DB_PASSWORD: password

    - name: 🧪 Run PHPUnit Tests
      run: php console test coverage --stop-on-failure
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: testing
        DB_USERNAME: root
        DB_PASSWORD: password
        REDIS_HOST: 127.0.0.1
        REDIS_PORT: 6379

    - name: 📊 Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/clover.xml
        flags: unittests
        name: codecov-umbrella

    - name: 🔍 Run PHP CS Fixer
      run: vendor/bin/php-cs-fixer fix --dry-run --diff --verbose

    - name: 🔍 Run PHPStan Analysis
      run: vendor/bin/phpstan analyse --memory-limit=2G

    - name: 🛡️ Run Security Audit
      run: composer audit

  # ========================================
  # FRONTEND BUILD
  # ========================================
  frontend:
    name: 🎨 Frontend Build
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🔍 Run ESLint
      run: npm run lint

    - name: 🧪 Run Frontend Tests
      run: npm run test

    - name: 🏗️ Build Assets
      run: npm run build

    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: public/build/

  # ========================================
  # DOCKER BUILD
  # ========================================
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [test, frontend]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📤 Download Frontend Build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: public/build/

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏗️ Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ========================================
  # DEPLOYMENT
  # ========================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Staging
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /var/www/staging
          docker-compose pull
          docker-compose up -d --remove-orphans
          docker-compose exec -T app php console migrate --force
          docker-compose exec -T app php console cache:clear
          docker-compose exec -T app php console config:cache

    - name: 🧪 Run Smoke Tests
      run: |
        sleep 30
        curl -f ${{ secrets.STAGING_URL }}/health || exit 1
        curl -f ${{ secrets.STAGING_URL }}/api/status || exit 1

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /var/www/production
          
          # Backup current version
          docker-compose exec -T app php console backup:create
          
          # Deploy new version
          docker-compose pull
          docker-compose up -d --remove-orphans
          
          # Run migrations
          docker-compose exec -T app php console migrate --force
          
          # Clear caches
          docker-compose exec -T app php console cache:clear
          docker-compose exec -T app php console config:cache
          docker-compose exec -T app php console route:cache
          
          # Warm up caches
          docker-compose exec -T app php console cache:warm

    - name: 🧪 Run Production Health Checks
      run: |
        sleep 60
        curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
        curl -f ${{ secrets.PRODUCTION_URL }}/api/status || exit 1

    - name: 📊 Update Monitoring
      run: |
        curl -X POST "${{ secrets.MONITORING_WEBHOOK }}" \
          -H "Content-Type: application/json" \
          -d '{
            "event": "deployment",
            "environment": "production",
            "version": "${{ github.sha }}",
            "status": "success"
          }'

  # ========================================
  # SECURITY SCANNING
  # ========================================
  security:
    name: 🛡️ Security Scanning
    runs-on: ubuntu-latest
    needs: [docker]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ghcr.io/${{ github.repository }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🔍 Run OWASP ZAP Baseline Scan
      if: github.ref == 'refs/heads/develop'
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: ${{ secrets.STAGING_URL }}

  # ========================================
  # PERFORMANCE TESTING
  # ========================================
  performance:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ⚡ Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          ${{ secrets.STAGING_URL }}
          ${{ secrets.STAGING_URL }}/products
          ${{ secrets.STAGING_URL }}/api/status
        uploadArtifacts: true
        temporaryPublicStorage: true

    - name: 🚀 Run Load Tests
      run: |
        npm install -g artillery
        artillery run tests/performance/load-test.yml --target ${{ secrets.STAGING_URL }}

  # ========================================
  # NOTIFICATIONS
  # ========================================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: 📢 Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: 📧 Email Notification
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.SMTP_SERVER }}
        server_port: ${{ secrets.SMTP_PORT }}
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "🚨 Deployment Failed: ${{ github.repository }}"
        body: |
          Deployment failed for ${{ github.repository }}
          
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          Please check the GitHub Actions logs for more details.
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.SMTP_FROM }}
